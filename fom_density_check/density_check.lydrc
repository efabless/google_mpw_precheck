<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>drc</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>drc_scripts</group-name>
 <menu-path>tools_menu.drc.end</menu-path>
 <interpreter>dsl</interpreter>
 <dsl-interpreter-name>drc-dsl-xml</dsl-interpreter-name>
 <text>
gds_input = source($gds_input)
report("Density Checks", $report_file)

verbose(true)

# switch checks here
FOM = true

LI = false
M1 = false
M2 = false
M3 = false
M4 = false
M5 = false

# difftap = diff + tap
diff_wildcard = "65/20"
tap_wildcard = "65/44"
fomfill_wildcard = "65,23/28"
fommk_wildcard = "23/0"

li_wildcard = "67/20"
lifill_wildcard = "56/0,28"

m1_wildcard = "68/20"
m1fill_wildcard = "36/0,28"

m2_wildcard = "69/20"
m2fill_wildcard = "41/0,28"

m3_wildcard = "70/20"
m3fill_wildcard = "34/0,28"

m4_wildcard = "71/20"
m4fill_wildcard = "51/0,28"

m5_wildcard = "72/20"
m5fill_wildcard = "59/0,28"

seal_wildcard = "81/1"

seal_layer = input(seal_wildcard)

hole_in_seal = seal_layer.holes

area_within_seal = hole_in_seal.area

def get_density(wildcard1, wildcard2, area_within_seal)
  metal_polygons = polygons(wildcard1, wildcard2) 
  # m_area_within_seal = (metal_polygons &amp; hole_in_seal).area; # slower
  m_area_within_seal = metal_polygons.area; # much faster but assumes there is no metal outside/on the seal
  density = m_area_within_seal / area_within_seal
  return density
end

### li
if LI
  m_ca_density = 1 - get_density(li_wildcard, lifill_wildcard, area_within_seal)
  print("LI1 Density:    #{1 - m_ca_density}\n")
  print("LI1 CA Density: #{m_ca_density}\n")
  m_ca_density &lt; 0.40 &amp;&amp; hole_in_seal.output("cli1m.4", "0.40 min. pattern density of clearArea not li1m.mk inside sealRing")
  m_ca_density &gt; 0.65 &amp;&amp; hole_in_seal.output("cli1m.5", "0.65 max. pattern density of clearArea not li1m.mk inside sealRing")
end


### m1
if M1
  m_ca_density = 1 - get_density(m1_wildcard, m1fill_wildcard, area_within_seal)
  print("M1 Density:    #{1 - m_ca_density}\n")
  print("M1 CA Density: #{m_ca_density}\n")
  m_ca_density &lt; 0.40 &amp;&amp; hole_in_seal.output("cmm1.pd.3", "0.4 min. pattern density of clearArea not mm1.mk inside sealRing")
  m_ca_density &gt; 0.65 &amp;&amp; hole_in_seal.output("cmm1.pd.4", "0.65 max. pattern density of clearArea not mm1.mk inside sealRing")
end


### m2
if M2
  m_ca_density = 1 - get_density(m2_wildcard, m2fill_wildcard, area_within_seal)
  print("M2 Density:    #{1 - m_ca_density}\n")
  print("M2 CA Density: #{m_ca_density}\n")
  m_ca_density &lt; 0.40 &amp;&amp; hole_in_seal.output("cmm2.pd.3", "0.4 min. pattern density of clearArea not mm2.mk inside sealRing")
  m_ca_density &gt; 0.65 &amp;&amp; hole_in_seal.output("cmm2.pd.4", "0.65 max. pattern density of clearArea not mm2.mk inside sealRing")
end


### m3
if M3
  m_ca_density = 1 - get_density(m3_wildcard, m3fill_wildcard, area_within_seal)
  print("M3 Density:    #{1 - m_ca_density}\n")
  print("M3 CA Density: #{m_ca_density}\n")
  m_ca_density &lt; 0.40 &amp;&amp; hole_in_seal.output("cmm3.pd.3", "0.40 min. pattern density of clearArea not mm3.mk inside sealRing")
  m_ca_density &gt; 0.65 &amp;&amp; hole_in_seal.output("cmm3.pd.4", "0.65 max. pattern density of clearArea not mm3.mk inside sealRing")
end


### m4
if M4
  m_ca_density = 1 - get_density(m4_wildcard, m4fill_wildcard, area_within_seal)
  print("M4 Density:    #{1 - m_ca_density}\n")
  print("M4 CA Density: #{m_ca_density}\n")
  m_ca_density &lt; 0.40 &amp;&amp; hole_in_seal.output("cmm4.pd.3", "0.4 min. pattern density of clearArea not mm4.mk inside sealRing")
  m_ca_density &gt; 0.65 &amp;&amp; hole_in_seal.output("cmm4.pd.4", "0.65 max. pattern density of clearArea not mm4.mk inside sealRing")
end


### m5
if M5
  m_ca_density = 1 - get_density(m5_wildcard, m5fill_wildcard, area_within_seal)
  print("M5 Density:    #{1 - m_ca_density}\n")
  print("M5 CA Density: #{m_ca_density}\n")
  m_ca_density &lt; 0.24 &amp;&amp; hole_in_seal.output("cmm4.pd.3", "0.4 min. pattern density of clearArea not mm4.mk inside sealRing")
  m_ca_density &gt; 0.55 &amp;&amp; hole_in_seal.output("cmm4.pd.4", "0.65 max. pattern density of clearArea not mm4.mk inside sealRing")
end


### fom

class AreaMapper &lt; RBA::TileOutputReceiver
  def initialize()
    @map = Array.new(100) { Array.new(100) }
  end

  def put(ix, iy, tile, obj, dbu, clip)
    ix = ix
    iy = iy
    @map[ix][iy] = obj
    puts "got area for tile #{ix},#{iy}: #{obj.to_s}"
  end
  
  def get_density_map()
    return @map
  end
end

# modified from https://www.klayout.de/forum/discussion/1459/density-drc-checks
def tiled_dens_check(output, input, tile_size, threads, bbox, receiver)
  tp = RBA::TilingProcessor::new

  tp.tile_size(tile_size, tile_size)
  tp.frame = bbox
  
  #tp.tiles(50, 20)
  #tp.tile_origin(0, 0)

  tp.output("res", receiver)
  tp.input("input", input.data)
  tp.dbu = 1.dbu  # establish the real database unit
  tp.threads = threads
  tp.queue("_output(res, to_f(input.area(_tile.bbox)))")
  # tp.queue("_tile &amp;&amp; (var d = to_f(input.area(_tile.bbox)) / to_f(_tile.bbox.area); (d &lt; vmin || d &gt; vmax) &amp;&amp; _output(res, _tile.bbox))")
  tp.execute("Density check")
end

if FOM

  threads(4)
  
  bbox = hole_in_seal.bbox

  window_size = 700
  
  step_size = 70
  
  llx, lly, urx, ury = bbox.left, bbox.bottom, bbox.right, bbox.top
  
  #  threads = 4
  # area_mapper = AreaMapper.new
  # dens_output = polygon_layer
  # tiled_dens_check(dens_output, fompd, step_size, threads, bbox, area_mapper)

  cnt = 0
  tot = ((urx-window_size-llx+1) * (ury-window_size-lly+1)) / (step_size * step_size)
  for x in (llx..urx-window_size).step(step_size)
    for y in (lly..ury-window_size).step(step_size)
      pl = polygon_layer
      pl.insert(box(x, y, x+window_size, y+window_size))
      box_within_seal = pl &amp; hole_in_seal
      
      m_area_within_seal = (box_within_seal &amp; source.touching(box_within_seal.bbox).polygons(diff_wildcard, tap_wildcard, fomfill_wildcard, fommk_wildcard)).area
      #m_within_seal = fompd &amp; box_within_seal; # bottleneck
      #m_area_within_seal = m_within_seal.area
      
      m_density = m_area_within_seal / box_within_seal.area
      cnt = cnt + 1
      # print("FOM Density: #{m_density}\n")
      print("Completion: #{cnt} / #{tot.round}\n")
      m_density &lt; 0.33 &amp;&amp; box_within_seal.output("cfom.pd.1d", "0.33 min FOM pattern density")
      m_density &gt; 0.57 &amp;&amp; box_within_seal.output("cfom.pd.1e", "0.57 max FOM pattern density")
    end
  end

end
</text>
</klayout-macro>
